initSidebarItems({"fn":[["super_fold_lifetime",""],["super_fold_ty",""]],"mod":[["binder_impls","This module contains impls of `Fold` for those types that introduce binders."],["boring_impls","This module contains \"rote and uninteresting\" impls of `Fold` for various types. In general, we prefer to derive `Fold`, but sometimes that doesn't work for whatever reason."],["shift",""],["subst",""]],"struct":[["Subst",""]],"trait":[["DefaultFreeVarFolder","A convenience trait. If you implement this, you get an implementation of `FreeVarFolder` for free that simply ignores free values (that is, it replaces them with themselves)."],["DefaultInferenceFolder","A convenience trait. If you implement this, you get an implementation of `InferenceFolder` for free that simply ignores inference values (that is, it replaces them with themselves)."],["DefaultPlaceholderFolder","A convenience trait. If you implement this, you get an implementation of `PlaceholderFolder` for free that simply ignores placeholder values (that is, it replaces them with themselves)."],["DefaultTypeFolder","A convenience trait that indicates that this folder doesn't take any action on types in particular, but just recursively folds their contents (note that free variables that are encountered in that process may still be substituted). The vast majority of folders implement this trait."],["Fold","Applies the given `Folder` to a value, producing a folded result of type `Self::Result`. The result is in the type family `TTF`. The result type is typically the same as the source type (modulo type family), but in some cases we convert from borrowed to owned as well (e.g., the folder for `&T` will fold to a fresh `T`; well, actually `T::Result`)."],["Folder","A \"folder\" is a transformer that can be used to make a copy of some term -- that is, some bit of IR, such as a `Goal` -- with certain changes applied. The idea is that it contains methods that let you swap types/lifetimes for new types/lifetimes; meanwhile, each bit of IR implements the `Fold` trait which, given a `Folder`, will reconstruct itself, invoking the folder's methods to transform each of the types/lifetimes embedded within."],["FreeVarFolder","The methods for folding free variables. These are `BoundVar` instances where the binder is not something we folded over.  This is used when you are instantiating previously bound things with some replacement."],["InferenceFolder",""],["PlaceholderFolder",""],["TypeFolder",""]]});